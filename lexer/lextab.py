# lextab.py. This file automatically created by PLY (version 3.11). Don't edit!
_tabversion   = '3.10'
_lextokens    = set(('at', 'case', 'class', 'colon', 'comma', 'divide', 'dot', 'else', 'equals', 'esac', 'false', 'fi', 'identifier', 'if', 'in', 'inherits', 'integer', 'isvoid', 'larrow', 'lbrace', 'le', 'let', 'loop', 'lparen', 'lt', 'minus', 'new', 'not', 'of', 'plus', 'pool', 'rarrow', 'rbrace', 'rparen', 'semi', 'string', 'then', 'tilde', 'times', 'true', 'type', 'while'))
_lexreflags   = 64
_lexliterals  = ''
_lexstateinfo = {'INITIAL': 'inclusive', 'comment': 'exclusive'}
_lexstatere   = {'INITIAL': [('(?P<t_boolean>t[rR][uU][eE]|f[aA][lL][sS][eE])|(?P<t_integer>\\d+)|(?P<t_type_identifier>[A-Z][a-zA-Z_0-9]*)|(?P<t_object_identifier>[a-z][a-zA-Z_0-9]*)|(?P<t_string>\\"([^\\\\\\n]|(\\\\.))*?\\")|(?P<t_newline>\\n+)|(?P<t_single_line_comment>\\-\\-[^\\n]*)|(?P<t_single_line_comment_newline>\\n+)|(?P<t_multi_line_comment>\\(\\*)|(?P<t_larrow>\\<\\-)|(?P<t_le>\\<\\=)|(?P<t_rarrow>\\=\\>)|(?P<t_at>\\@)|(?P<t_colon>\\:)|(?P<t_comma>\\,)|(?P<t_divide>\\/)|(?P<t_dot>\\.)|(?P<t_equals>\\=)|(?P<t_lbrace>\\{)|(?P<t_lparen>\\()|(?P<t_lt>\\<)|(?P<t_minus>\\-)|(?P<t_plus>\\+)|(?P<t_rbrace>\\})|(?P<t_rparen>\\))|(?P<t_semi>\\;)|(?P<t_times>\\*)|(?P<t_tilde>~)', [None, ('t_boolean', 'boolean'), ('t_integer', 'integer'), ('t_type_identifier', 'type_identifier'), ('t_object_identifier', 'object_identifier'), ('t_string', 'string'), None, None, ('t_newline', 'newline'), ('t_single_line_comment', 'single_line_comment'), ('t_single_line_comment_newline', 'single_line_comment_newline'), ('t_multi_line_comment', 'multi_line_comment'), (None, 'larrow'), (None, 'le'), (None, 'rarrow'), (None, 'at'), (None, 'colon'), (None, 'comma'), (None, 'divide'), (None, 'dot'), (None, 'equals'), (None, 'lbrace'), (None, 'lparen'), (None, 'lt'), (None, 'minus'), (None, 'plus'), (None, 'rbrace'), (None, 'rparen'), (None, 'semi'), (None, 'times'), (None, 'tilde')])], 'comment': [('(?P<t_comment_open>\\(\\*)|(?P<t_comment_close>\\*\\))|(?P<t_comment_newline>\\n+)', [None, ('t_comment_open', 'open'), ('t_comment_close', 'close'), ('t_comment_newline', 'newline')])]}
_lexstateignore = {'comment': ' \t\r\x0c', 'INITIAL': ' \t\r\x0c\x0b'}
_lexstateerrorf = {'comment': 't_comment_error', 'INITIAL': 't_error'}
_lexstateeoff = {}
